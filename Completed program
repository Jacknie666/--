import smtplib
from email.mime.text import MIMEText
import time
import requests
import hashlib
import json


# Email configuration. Replace these default values with your actual email credentials
# before running the code in a production environment. The default values here are just placeholders.
SMTP_SERVER = 'smtp.example.com'
SMTP_PORT = 587
EMAIL_ADDRESS = 'your_email@example.com'
EMAIL_PASSWORD = 'your_password'
RECIPIENT_EMAIL = 'recipient_email@example.com'

# Web scraping and price extraction logic
headers = {
    'accept': 'application/json',
    'accept - language': 'zh - CN,zh;q = 0.9,en;q = 0.8,en - GB;q = 0.7,en - US;q = 0.6',
    'content - type': 'application/x - www - form - urlencoded',
    'cookie': 'default_cookie_value',
    'priority': 'u = 1, i',
    'referer': 'https://www.example.com/',
    'sec - ch - ua': '"Not A(Brand";v = "8", "Chromium";v = "132", "Microsoft Edge";v = "132"',
    'sec - ch - ua - mobile': '?0',
    'sec - ch - ua - platform': '"Windows"',
    'sec - fetch - dest': 'empty',
    'sec - fetch - mode': 'cors',
    'sec - fetch - site': 'same - site',
    'user - agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36 Edg/132.0.0.0'
}

# Replace these default values with actual values for your use case.
token = "default_token_value"
itemId = "default_itemId_value"


# Function to sign the request
def sign(token: str, timestamp: str, itemId: str) -> str:
    secret_key = token
    user_id = "default_user_id"
    var_param = json.dumps({"itemId": itemId}, separators=(",", ":"))
    input_str = f"{secret_key}&{timestamp}&{user_id}&{var_param}"
    return hashlib.md5(input_str.encode('utf - 8')).hexdigest()


# Prepare the request params
def get_params():
    timestamp = str(int(time.time() * 1000))
    params = {
        'jsv': '2.7.2',
        'appKey': 'default_appKey',
        't': timestamp,
        'sign': sign(token, timestamp, itemId),
        'v': '1.0',
        'type': 'originaljson',
        'accountSite': 'xianyu',
        'dataType': 'json',
        'timeout': '20000',
        'api': 'mtop.taobao.idle.pc.detail',
        'sessionOption': 'AutoLoginOnly',
        'spm_cnt': 'a21ybx.item.0.0',
        'spm_pre': 'a21ybx.item.itemCnxh.10.26a83da6EDxKK2',
        'log_id': '70e63da6ZfbRRG'
    }
    return params


# Function to send email with price update
def send_email(price: str):
    message = MIMEText(f'Commodity ID {itemId} current price is: {price} yuan', 'plain', 'GBK')
    message['Subject'] = 'Commodity Price Update'
    message['From'] = EMAIL_ADDRESS
    message['To'] = RECIPIENT_EMAIL

    try:
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
        server.sendmail(EMAIL_ADDRESS, RECIPIENT_EMAIL, message.as_string())
        print(f'Email sent successfully, price: {price}')
    except Exception as e:
        print(f'Email sending failed: {e}')
    finally:
        if 'server' in locals():
            server.quit()


# Function to fetch the price and trigger email sending
def fetch_and_send_price():
    params = get_params()
    data = {
        'data': '{"itemId":"' + itemId + '"}'
    }

    response = requests.post(
        'https://h5api.m.goofish.com/h5/mtop.taobao.idle.pc.detail/1.0/',
        params=params,
        headers=headers,
        data=data
    )

    price = response.json()["data"]["itemDO"]["soldPrice"]
    send_email(price)


# Main loop to send emails every 3 seconds
while True:
    fetch_and_send_price()
    time.sleep(3)  # Wait for 3 seconds before sending the next email
